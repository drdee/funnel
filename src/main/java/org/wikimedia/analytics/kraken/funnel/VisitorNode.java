package org.wikimedia.analytics.kraken.funnel;

import java.util.HashMap;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

import org.wikimedia.analytics.kraken.exceptions.MalformedFunnelException;

public class VisitorNode extends Node{
	/** The params. */
	public HashMap<String, String> nodeIdentifier;
	
	/** The wikis. */
	public Pattern wikis = Pattern.compile("");

	/**
	 * Instantiates a new node. 
	 *
	 * @param fproject the project variable as generated by the EventLogging extension.
	 * @param fnamespace the namespace variable as generated by the EventLogging extension.
	 * @param fpage the page variable as generated by the EventLogging extension.
	 * @param fevent the event variable as generated by the EventLogging extension.
	 * @throws MalformedFunnelException 
	 */
	public VisitorNode(String url) throws MalformedFunnelException {
		super();
		this.setNodeIdentifier();
	}

	/**
	 * Split project variable from EventLogging data in language and project 
	 * component.
	 *
	 * @param fproject the new project
	 */
	protected void setNodeIdentifier() {
		//String fproject = this.nodeDefinition.get("project");
		String fproject = null;
		MatchResult m = wikis.matcher(fproject);
		String project = m.group();
		String languageCode = fproject.substring(0, fproject.indexOf(project));
		this.nodeIdentifier.put("project", project);
		this.nodeIdentifier.put("languageCode", languageCode);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(100);
		int e = 1;
		for (String key : keys) {
			String value = this.nodeIdentifier.get(key);
			if (value != null) {
				sb.append(value.toString());
			} else {
				sb.append(".");
			}
			if (e != nodeIdentifier.size()) {
				sb.append(":");
			}
			e++;
		}
		return sb.toString();
	}
}
