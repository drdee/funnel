package org.wikimedia.analytics.kraken.funnel;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.wikimedia.analytics.kraken.exceptions.MalformedFunnelException;

/**
 * Component	Description					Example
 * client		client application 			web, iphone, android
 * languagecode	project language			en, fr, ja
 * project		project name				wikipedia, wikisource
 * namespace								0, 2
 * page			page or functional grouping		
 * event		action taken by user		impression, click
 *
 * suggested encoding of an event:
 * client:languagecode:project:namespace:page:event
 * 
 * Inspiration taken from "The UniÔ¨Åed Logging Infrastructure
 * for Data Analytics at Twitter" 
 * (http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf)
 */
public class UserActionNode {
	/** The params. */
	public HashMap<ComponentType, String> componentValues;
	public Pattern wikis = Pattern.compile(""); //Actually regex is missing
	public List<Date> visited;
	public String url;

	/**
	 * Instantiates a new node. 
	 *
	 * @param eventLoggingQueryString
	 * @throws MalformedFunnelException 
	 */
	public UserActionNode(String eventLoggingQueryString) throws MalformedFunnelException {
		/**
		 * // TODO: this gets repeated for every instantiation so it should be 
		 * factored out, this will be taken care of once we store the EventLoggin
		 * data using AVRO.
		 * 
		 * This function takes as input different fields from the EventLogging 
		 * extension  and turns it into a single string that is in the form:
		 * client:languagecode:project:namespace:page:event {@link Node}
		 *
		 * @param fproject the project variable as generated by the EventLogging extension.
		 * @param fnamespace the namespace variable as generated by the EventLogging extension.
		 * @param fpage the page variable as generated by the EventLogging extension.
		 * @param fevent the event variable as generated by the EventLogging extension.
		 */	
		List<NameValuePair> params = null;
		try {
			URI url = new URI("http://www.wikipedia.org/" + eventLoggingQueryString);
			params = URLEncodedUtils.parse(url, "UTF-8");
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}

		for (ComponentType key: ComponentType.values()) {
			for (NameValuePair param : params) {
				if (key.equals(param.getName())) {
					if (key.equals("project")) {
						splitProject(param.getName());
					}
					componentValues.put(key, param.getValue());
				}
			}
		}
	}

	/**
	 * Split project variable from EventLogging data in language and project 
	 * component.
	 *
	 * @param fproject the new project
	 */
	protected void splitProject(String fproject) {
		//BROKEN
		//String fproject = this.nodeDefinition.get("project");
		MatchResult m = wikis.matcher(fproject);
		String project = m.group();
		String languageCode = fproject.substring(0, fproject.indexOf(project));
		ComponentType p = ComponentType.valueOf("PROJECT");
		ComponentType lc = ComponentType.valueOf("LANGUAGE");
		this.componentValues.put(p, project);
		this.componentValues.put(lc, languageCode);
	}

	/*
	 * Compare two nodes and determine whether they can be considered the same.
	 */
	public boolean equals(UserActionNode node) {
		if (this == node) return true;
		if (!(node instanceof UserActionNode)) return false;
		if (this.toString().equals(node.toString())) {
			return true;
		} else {
			return false;
		}
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(100);
		int e = 1;
		for (ComponentType key : ComponentType.values()) {
			String value = this.componentValues.get(key);
			if (value != null) {
				sb.append(value.toString());
			} else {
				sb.append(".");
			}
			if (e != componentValues.size()) {
				sb.append(":");
			}
			e++;
		}
		return sb.toString();
	}
}
