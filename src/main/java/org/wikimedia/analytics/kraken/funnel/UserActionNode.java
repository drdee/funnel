/**
 *Copyright (C) 2012  Wikimedia Foundation
 *
 *This program is free software; you can redistribute it and/or
 *modify it under the terms of the GNU General Public License
 *as published by the Free Software Foundation; either version 2
 *of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program; if not, write to the Free Software
 *Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @version $Id: $Id
 */

package org.wikimedia.analytics.kraken.funnel;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.wikimedia.analytics.kraken.exceptions.MalformedFunnelException;

/**
 * Component	Description					Example
 * client		client application 			web, iphone, android
 * languagecode	project language			en, fr, ja
 * project		project name				wikipedia, wikisource
 * namespace								0, 2
 * page			page or functional grouping		
 * event		action taken by user		impression, click
 *
 * suggested encoding of an event:
 * client:languagecode:project:namespace:page:event
 * 
 * Inspiration taken from "The UniÔ¨Åed Logging Infrastructure
 * for Data Analytics at Twitter" 
 * (http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf)
 */
public class UserActionNode extends Node{
	/** The params. */
	public Map<ComponentType, String> componentValues;
	public Pattern wikis = Pattern.compile("project:(patternForProject)|||language:(patternForLanguage)"); //TODO: Find actual regex
	public List<Date> visited;
	public String url;

	/**
	 * Instantiates a new node. 
	 *
	 * @param eventLoggingQueryString
	 * @throws MalformedFunnelException 
	 */
	public UserActionNode(String eventLoggingQueryString) throws MalformedFunnelException {
		/**
		 * // TODO: this gets repeated for every instantiation so it should be 
		 * factored out, this will be taken care of once we store the EventLoggin
		 * data using AVRO.
		 * 
		 * This function takes as input different fields from the EventLogging 
		 * extension  and turns it into a single string that is in the form:
		 * client:languagecode:project:namespace:page:event {@link Node}
		 *
		 * @param project the project variable as generated by the EventLogging extension.
		 * @param namespace the namespace variable as generated by the EventLogging extension.
		 * @param page the page variable as generated by the EventLogging extension.
		 * @param event the event variable as generated by the EventLogging extension.
		 */	
		List<NameValuePair> params = null;
		try {
			URI url = new URI("http://www.wikipedia.org/" + eventLoggingQueryString);
			params = URLEncodedUtils.parse(url, "UTF-8");
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		assert params != null;

		for (NameValuePair param : params) {
			String name = param.getName();
			String value = param.getValue();
			ComponentType type = ComponentType.valueOf(name);
			switch (type) {
				case PROJECT:
					componentValues.putAll(splitProject(value));
				default:
					componentValues.put(type, value);
				}
		}
	}

	/**
	 * Split project variable from EventLogging data in language and project 
	 * component.
	 *
	 * @param project the new project
	 */
	protected HashMap<ComponentType, String> splitProject(String project) {
		MatchResult match = wikis.matcher(project);
		HashMap<ComponentType, String> ret = new HashMap<ComponentType, String>();
		ret.put(ComponentType.PROJECT, match.group(0));
		ret.put(ComponentType.LANGUAGE, match.group(1));
		return ret;
	}

	/*
	 * Compare two nodes and determine whether they can be considered the same.
	 */
	public boolean equals(Object obj) {
		//TODO: implementation not yet finished, use Apache Commons EqualsBuilder
		if (this == obj) return true;
		if (obj == null) return false;
		Node node = (Node)obj;
		return this.toString().equals(node.toString());
	}

	public String toString() {
		List<String> sb = new LinkedList<String>();
		for (ComponentType key : ComponentType.values()) {
			String value = componentValues.get(key);
			sb.add(value.isEmpty() ?  "." : value);
		}
		return StringUtils.join(sb, ':');
	}
}
